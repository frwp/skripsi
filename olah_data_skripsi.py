# -*- coding: utf-8 -*-
"""Skripsi-data

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zkEgY9szPDW0qkKjZpCtEG9pfxEDEt2Q

> note: file aslinya lebih panjang karena terdapat beberapa kode yang tidak digunakan dalam skripsi
tetapi membantu dalam visualisasi bentuk data

# Skripsi Rian

Pengaruh penggunaan bahasa pemrograman dan protokol komunikasi serial terhadap performa iot
"""

import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb
import numpy as np

# from google.colab import drive
# # drive.mount('/content/drive', force_remount=True)
# drive.mount('/content/drive')
rootdir = '/content/drive/MyDrive/'

"""## The Data"""

base_dir = rootdir + 'skripsi/'
print(os.listdir(base_dir))

os.listdir(base_dir)

csv_files = [f for f in os.listdir(base_dir) if f.endswith('.csv')]
print(csv_files)

# multilevel index for data
SPI = 'SPI'
I2C = 'I2C'
C = 'C'
CS = 'CS'
GOLANG = 'GOLANG'
JAVA = 'JAVA'
JAVASCRIPT = 'JAVASCRIPT'
PYTHON = 'PYTHON'
RUST = 'RUST'

protocols = [SPI, I2C]
languages = [C, CS, GOLANG, JAVA, JAVASCRIPT, PYTHON, RUST]
keys = [(p, l) for p in protocols for l in languages]
print(keys)

def parse_data(csv_files):
    dataframes = []
    for f in csv_files:
        """
        File csv memiliki format nama file: <tipe data>-<protokol>-<language>.csv

        """
        split = f.removesuffix('.csv').split('-')
        m_type = split[0]
        protocol = split[1]
        lang = split[2]
        df = pd.read_csv(os.path.join(base_dir, f))
        if m_type == 'cpu_ram':
            df.columns = ['rss', 'pcpu', 'program_name']
            df = df.iloc[:1805]
        if m_type == 'response':
            # skip memasukkan data waktu respons. pengolahan di tempat lain
            continue
        if m_type == 'listrik':
            df = pd.read_csv(os.path.join(base_dir, f), header=0, names=['volt', 'ampere'], usecols=[1, 2])
            df['volt'] = df['volt'].str[:5]
            df['ampere'] = df['ampere'].str[:5]
            for index, row in df.iterrows():
                volt = row['volt']
                ampere = row['ampere']
                try:
                    volt = float(volt)
                except ValueError as e:
                    df = df.drop(index)
                    continue
                try:
                    ampere = float(ampere)
                except ValueError as e:
                    df = df.drop(index)
                    continue
                while volt > 6:
                    volt /= 10
                while ampere >= 2:
                    ampere /= 10
                if ampere > 0.6 and ampere < 1.5:
                    ampere -= 0.5
                df.loc[index, 'volt'] = volt
                df.loc[index, 'ampere'] = ampere
            df = df.iloc[:1800]
            df.loc[:, 'volt'] = df['volt'].astype('float64')
            df.loc[:, 'ampere'] = df['ampere'].astype('float64')
            if df.shape[0] < 1800:
                print(f)
        dataframes.append((lang.upper(), protocol.upper(), m_type, df))
    
    new_dataframes = []

    for i, df_i in enumerate(dataframes):
        for j, df_j in enumerate(dataframes):
            if i < j and df_i[:2] == df_j[:2]:
                new_dataframes.append((df_i[0], df_i[1], pd.concat([df_i[3], df_j[3]], axis=1)[['program_name', 'rss', 'pcpu', 'volt', 'ampere']]))
    return new_dataframes


"""
Data waktu respons sudah dipindahkan secara manual dari file csv ke file excel.
Hal ini dilakukan untuk memudahkan pembacaan data.
Data waktu respons tidak digabungkan dengan data yang lain karena perbedaan dimensi data.
"""
data_response = pd.read_excel(os.path.join(base_dir, "analisis skripsi.xlsx"), header=0, index_col=[0, 1, 2])
print(data_response)

dataframes = parse_data(csv_files)


merged_df = pd.concat([x[2] for x in dataframes], keys=[(x[1], x[0]) for x in dataframes], names=['protocol', 'language', 'index'])
merged_df['watt'] = merged_df['volt'] * merged_df['ampere']

print(merged_df)

"""## The Statistics"""

"""
Membuat descriptive statistics (rata-rata, median, standar deviasi, etc.),
memasukkannya ke list dan menuliskan ke file excel.
Di sini statistik data waktu respons digabungkan dengan statistik data yang lain.
Returns list yang dibuat.
"""
def write_stats_to_excel(keys, file_name):
    merged_stats = []
    for pair in keys:
        try:
            d = pd.concat([merged_df.loc[pair].describe(), data_response.loc[pair].describe()], axis=1)
            merged_stats.append(d)
        except KeyError as e:
            print(e)
    with pd.ExcelWriter(
        os.path.join(file_name),
        mode='a',
        if_sheet_exists='replace'
    ) as writer:
        for i, pair in enumerate(keys):
            merged_stats[i].to_excel(writer, sheet_name=(f"{pair[0]}-{pair[1]}"))
            print(merged_stats[i])
            print(pair)
    return merged_stats

excel_stats_file = os.path.join(base_dir, "analisis skripsi.xlsx")
merged_stats = write_stats_to_excel(keys, excel_stats_file)

"""
## The Graph

### All cpu and ram
"""

fig, (spi_ax, i2c_ax) = plt.subplots(2, 1, figsize=(12, 9))
fig.suptitle('SPI vs I2C cpu usage')

spi_ax.set_title('SPI percent CPU usage')
sb.lineplot(data=merged_df.loc['SPI'], x='index', y='pcpu', hue='language', hue_order=languages, ax=spi_ax)

i2c_ax.set_title('I2C percent CPU usage')
sb.lineplot(data=merged_df.loc['I2C'], x='index', y='pcpu', hue='language', hue_order=languages, ax=i2c_ax)

plt.show()

fig, (spi_ax, i2c_ax) = plt.subplots(2, 1, figsize=(12, 9))
fig.suptitle('SPI vs I2C cpu usage')

spi_ax.set_title('SPI percent CPU usage')
spi_ax.set_ylim([0, 10])
sb.lineplot(data=merged_df.loc['SPI'], x='index', y='pcpu', hue='language', hue_order=languages, ax=spi_ax)

i2c_ax.set_title('I2C percent CPU usage')
i2c_ax.set_ylim([0, 10])
sb.lineplot(data=merged_df.loc['I2C'], x='index', y='pcpu', hue='language', hue_order=languages, ax=i2c_ax)

plt.show()

fig, (spi_ax, i2c_ax) = plt.subplots(2, 1, figsize=(12, 9))
fig.suptitle('SPI vs I2C ram usage')

spi_ax.set_title('SPI RAM usage (MB)')
sb.lineplot(data=merged_df.loc['SPI'], x='index', y='rss', hue='language', hue_order=languages, ax=spi_ax)

i2c_ax.set_title('I2C RAM usage (MB)')
sb.lineplot(data=merged_df.loc['I2C'], x='index', y='rss', hue='language', hue_order=languages, ax=i2c_ax)

plt.show()

"""### Power"""

fig, (watt_i2c, watt_spi) = plt.subplots(1, 2)
fig.set_size_inches(24, 6)
fig.suptitle('I2C and SPI power draw')

watt_i2c.set_title('I2C power draw')
sb.lineplot(data=merged_df.loc['I2C'], x='index', y='watt', hue='language', ax=watt_i2c)

watt_spi.set_title('SPI power draw')
sb.lineplot(data=merged_df.loc['SPI'], x='index', y='watt', hue='language', ax=watt_spi)

plt.show()
